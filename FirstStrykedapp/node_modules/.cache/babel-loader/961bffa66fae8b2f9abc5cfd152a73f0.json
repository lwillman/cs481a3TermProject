{"ast":null,"code":"const validate = (value, rules) => {\n  let isValid = true;\n\n  for (let rule in rules) {\n    switch (rule) {\n      case 'minLength':\n        isValid = isValid && minLengthValidator(value, rules[rule]);\n        break;\n\n      case 'isRequired':\n        isValid = isValid && requiredValidator(value);\n        break;\n\n      default:\n        isValid = true;\n    }\n  }\n\n  return isValid;\n};\n/**\r\n * minLength Val\r\n * @param  value\r\n * @param  minLength\r\n * @return\r\n */\n\n\nconst minLengthValidator = (value, minLength) => {\n  return value.length >= minLength;\n};\n/**\r\n * Check to confirm that feild is required\r\n *\r\n * @param  value\r\n * @return\r\n */\n\n\nconst requiredValidator = value => {\n  return value.trim() !== '';\n};\n/**\r\n * Email validation\r\n *\r\n * @param value\r\n * @return\r\n */\n\n\nconst emailValidator = value => {\n  var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(String(value).toLowerCase());\n};\n\nexport default validate;","map":{"version":3,"sources":["C:/Users/sajaa/github/cs481a3TermProject/FirstStrykedapp/src/components/validation.js"],"names":["validate","value","rules","isValid","rule","minLengthValidator","requiredValidator","minLength","length","trim","emailValidator","re","test","String","toLowerCase"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAC/B,MAAIC,OAAO,GAAG,IAAd;;AAEA,OAAK,IAAIC,IAAT,IAAiBF,KAAjB,EAAwB;AAEpB,YAAQE,IAAR;AACI,WAAK,WAAL;AAAkBD,QAAAA,OAAO,GAAGA,OAAO,IAAIE,kBAAkB,CAACJ,KAAD,EAAQC,KAAK,CAACE,IAAD,CAAb,CAAvC;AAA6D;;AAE/E,WAAK,YAAL;AAAmBD,QAAAA,OAAO,GAAGA,OAAO,IAAIG,iBAAiB,CAACL,KAAD,CAAtC;AAA+C;;AAElE;AAASE,QAAAA,OAAO,GAAG,IAAV;AALb;AAQH;;AAED,SAAOA,OAAP;AACH,CAhBD;AAmBA;;;;;;;;AAMA,MAAME,kBAAkB,GAAG,CAACJ,KAAD,EAAQM,SAAR,KAAsB;AAC7C,SAAON,KAAK,CAACO,MAAN,IAAgBD,SAAvB;AACH,CAFD;AAIA;;;;;;;;AAMA,MAAMD,iBAAiB,GAAGL,KAAK,IAAI;AAC/B,SAAOA,KAAK,CAACQ,IAAN,OAAiB,EAAxB;AACH,CAFD;AAIA;;;;;;;;AAMA,MAAMC,cAAc,GAAGT,KAAK,IAAI;AAC5B,MAAIU,EAAE,GAAG,yJAAT;AACA,SAAOA,EAAE,CAACC,IAAH,CAAQC,MAAM,CAACZ,KAAD,CAAN,CAAca,WAAd,EAAR,CAAP;AACH,CAHD;;AAOA,eAAed,QAAf","sourcesContent":["const validate = (value, rules) => {\r\n    let isValid = true;\r\n\r\n    for (let rule in rules) {\r\n\r\n        switch (rule) {\r\n            case 'minLength': isValid = isValid && minLengthValidator(value, rules[rule]); break;\r\n\r\n            case 'isRequired': isValid = isValid && requiredValidator(value); break;\r\n\r\n            default: isValid = true;\r\n        }\r\n\r\n    }\r\n\r\n    return isValid;\r\n}\r\n\r\n\r\n/**\r\n * minLength Val\r\n * @param  value\r\n * @param  minLength\r\n * @return\r\n */\r\nconst minLengthValidator = (value, minLength) => {\r\n    return value.length >= minLength;\r\n}\r\n\r\n/**\r\n * Check to confirm that feild is required\r\n *\r\n * @param  value\r\n * @return\r\n */\r\nconst requiredValidator = value => {\r\n    return value.trim() !== '';\r\n}\r\n\r\n/**\r\n * Email validation\r\n *\r\n * @param value\r\n * @return\r\n */\r\nconst emailValidator = value => {\r\n    var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    return re.test(String(value).toLowerCase());\r\n}\r\n\r\n\r\n\r\nexport default validate;"]},"metadata":{},"sourceType":"module"}