{"ast":null,"code":"import Web3 from \"web3\";\nimport store from \"../redux/store\"; //Used from CryptoZombie Dapp\n//import web3Initialized from \"../redux/modules/czAppDuck\";  // for some unknown reason, the duck doesn't work!\n// so use this action type and creator instead\n\nconst WEB3_INITIALIZED = 'WEB3_INITIALIZED'; // action type\n// action creator\n\nfunction web3Initialized(results) {\n  console.log(\"action creator\", results);\n  return {\n    type: WEB3_INITIALIZED,\n    payload: results\n  };\n} //  This module resolves metamask (or other provider) to set up the web3 instance in redux store\n\n\nconst getWeb3 = () => new Promise((resolve, reject) => {\n  // Wait for loading completion to avoid race conditions with web3 injection timing.\n  var results;\n  window.addEventListener(\"load\", async () => {\n    // Modern dapp browsers...\n    if (window.ethereum) {\n      const web3 = new Web3(window.ethereum);\n\n      try {\n        // Request account access if needed\n        await window.ethereum.enable(); // Acccounts now exposed\n\n        resolve(web3);\n      } catch (error) {\n        reject(error);\n      }\n\n      results = {\n        web3Instance: web3\n      };\n      console.log(\"Injected web3 detected.\", results);\n      resolve(store.dispatch(web3Initialized(results))); // redux action creator\n    } // Legacy dapp browsers...\n    else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n        results = {\n          web3Instance: web3\n        };\n        console.log(\"legacy Injected web3 detected.\");\n        resolve(store.dispatch(web3Initialized(results))); // redux action creator\n      } // Fallback to localhost; use dev console port by default...\n      else {\n          const provider = new Web3.providers.HttpProvider(\"http://127.0.0.1:8545\");\n          const web3 = new Web3(provider);\n          resolve(web3);\n          results = {\n            web3Instance: web3\n          };\n          console.log(\"No web3 instance injected, using Local web3.\");\n          resolve(store.dispatch(web3Initialized(results))); // redux action creator\n        }\n  });\n});\n\nexport default getWeb3;","map":{"version":3,"sources":["C:/Users/sajaa/github/cs481a3TermProject/FirstStrykedapp/src/utils/getWeb3.js"],"names":["Web3","store","WEB3_INITIALIZED","web3Initialized","results","console","log","type","payload","getWeb3","Promise","resolve","reject","window","addEventListener","ethereum","web3","enable","error","web3Instance","dispatch","provider","providers","HttpProvider"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAOC,KAAP,MAAkB,gBAAlB,C,CAEA;AACA;AACA;;AAEA,MAAMC,gBAAgB,GAAG,kBAAzB,C,CAA6C;AAE7C;;AACA,SAASC,eAAT,CAAyBC,OAAzB,EAAkC;AAC9BC,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BF,OAA9B;AACA,SAAO;AACHG,IAAAA,IAAI,EAAEL,gBADH;AAEHM,IAAAA,OAAO,EAAEJ;AAFN,GAAP;AAIH,C,CAED;;;AAEA,MAAMK,OAAO,GAAG,MACZ,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC7B;AACA,MAAIR,OAAJ;AACAS,EAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC,YAAY;AACxC;AACA,QAAID,MAAM,CAACE,QAAX,EAAqB;AACjB,YAAMC,IAAI,GAAG,IAAIhB,IAAJ,CAASa,MAAM,CAACE,QAAhB,CAAb;;AACA,UAAI;AACA;AACA,cAAMF,MAAM,CAACE,QAAP,CAAgBE,MAAhB,EAAN,CAFA,CAGA;;AACAN,QAAAA,OAAO,CAACK,IAAD,CAAP;AACH,OALD,CAKE,OAAOE,KAAP,EAAc;AACZN,QAAAA,MAAM,CAACM,KAAD,CAAN;AACH;;AACDd,MAAAA,OAAO,GAAG;AACNe,QAAAA,YAAY,EAAEH;AADR,OAAV;AAGAX,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCF,OAAvC;AACAO,MAAAA,OAAO,CAACV,KAAK,CAACmB,QAAN,CAAejB,eAAe,CAACC,OAAD,CAA9B,CAAD,CAAP,CAdiB,CAckC;AACtD,KAfD,CAgBA;AAhBA,SAiBK,IAAIS,MAAM,CAACG,IAAX,EAAiB;AAClB;AACA,cAAMA,IAAI,GAAGH,MAAM,CAACG,IAApB;AACAX,QAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAK,QAAAA,OAAO,CAACK,IAAD,CAAP;AACAZ,QAAAA,OAAO,GAAG;AACNe,UAAAA,YAAY,EAAEH;AADR,SAAV;AAGAX,QAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;AACAK,QAAAA,OAAO,CAACV,KAAK,CAACmB,QAAN,CAAejB,eAAe,CAACC,OAAD,CAA9B,CAAD,CAAP,CATkB,CASiC;AACtD,OAVI,CAWL;AAXK,WAYA;AACD,gBAAMiB,QAAQ,GAAG,IAAIrB,IAAI,CAACsB,SAAL,CAAeC,YAAnB,CACb,uBADa,CAAjB;AAGA,gBAAMP,IAAI,GAAG,IAAIhB,IAAJ,CAASqB,QAAT,CAAb;AACAV,UAAAA,OAAO,CAACK,IAAD,CAAP;AACAZ,UAAAA,OAAO,GAAG;AACNe,YAAAA,YAAY,EAAEH;AADR,WAAV;AAGAX,UAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ;AACAK,UAAAA,OAAO,CAACV,KAAK,CAACmB,QAAN,CAAejB,eAAe,CAACC,OAAD,CAA9B,CAAD,CAAP,CAVC,CAUkD;AACtD;AACJ,GA3CD;AA4CH,CA/CD,CADJ;;AAkDA,eAAeK,OAAf","sourcesContent":["import Web3 from \"web3\";\r\nimport store from \"../redux/store\";\r\n\r\n//Used from CryptoZombie Dapp\r\n//import web3Initialized from \"../redux/modules/czAppDuck\";  // for some unknown reason, the duck doesn't work!\r\n// so use this action type and creator instead\r\n\r\nconst WEB3_INITIALIZED = 'WEB3_INITIALIZED'; // action type\r\n\r\n// action creator\r\nfunction web3Initialized(results) {\r\n    console.log(\"action creator\", results);\r\n    return {\r\n        type: WEB3_INITIALIZED,\r\n        payload: results\r\n    }\r\n}\r\n\r\n//  This module resolves metamask (or other provider) to set up the web3 instance in redux store\r\n\r\nconst getWeb3 = () =>\r\n    new Promise((resolve, reject) => {\r\n        // Wait for loading completion to avoid race conditions with web3 injection timing.\r\n        var results;\r\n        window.addEventListener(\"load\", async () => {\r\n            // Modern dapp browsers...\r\n            if (window.ethereum) {\r\n                const web3 = new Web3(window.ethereum);\r\n                try {\r\n                    // Request account access if needed\r\n                    await window.ethereum.enable();\r\n                    // Acccounts now exposed\r\n                    resolve(web3);\r\n                } catch (error) {\r\n                    reject(error);\r\n                }\r\n                results = {\r\n                    web3Instance: web3\r\n                };\r\n                console.log(\"Injected web3 detected.\", results);\r\n                resolve(store.dispatch(web3Initialized(results))); // redux action creator\r\n            }\r\n            // Legacy dapp browsers...\r\n            else if (window.web3) {\r\n                // Use Mist/MetaMask's provider.\r\n                const web3 = window.web3;\r\n                console.log(\"Injected web3 detected.\");\r\n                resolve(web3);\r\n                results = {\r\n                    web3Instance: web3\r\n                };\r\n                console.log(\"legacy Injected web3 detected.\");\r\n                resolve(store.dispatch(web3Initialized(results))); // redux action creator\r\n            }\r\n            // Fallback to localhost; use dev console port by default...\r\n            else {\r\n                const provider = new Web3.providers.HttpProvider(\r\n                    \"http://127.0.0.1:8545\"\r\n                );\r\n                const web3 = new Web3(provider);\r\n                resolve(web3);\r\n                results = {\r\n                    web3Instance: web3\r\n                };\r\n                console.log(\"No web3 instance injected, using Local web3.\");\r\n                resolve(store.dispatch(web3Initialized(results))); // redux action creator\r\n            }\r\n        });\r\n    });\r\n\r\nexport default getWeb3;\r\n"]},"metadata":{},"sourceType":"module"}